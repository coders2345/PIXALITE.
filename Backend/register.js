var Web3 = require('web3');
var providerUrl = 'http://127.0.0.1:4444'; // Replace with the appropriate provider URL
var web3 = new Web3(providerUrl);

web3.eth.getAccounts().then(function(accounts) {
  var deployer = accounts[0];

  var bytecode = '0x608060405234801561000f575f80fd5b5061038b8061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610034575f3560e01c80635a9b0b8914610038578063937f6e7714610056575b5f80fd5b61004061006b565b60405161004d9190610109565b60405180910390f35b610069610064366004610168565b6100fa565b005b60605f805461007990610213565b80601f01602080910402602001604051908101604052809291908181526020018280546100a590610213565b80156100f05780601f106100c7576101008083540402835291602001916100f0565b820191905f5260205f20905b8154815290600101906020018083116100d357829003601f168201915b5050505050905090565b5f6101058282610299565b5050565b5f6020808352835180828501525f5b8181101561013457858101830151858201604001528201610118565b505f604082860101526040601f19601f8301168501019250505092915050565b634e487b7160e01b5f52604160045260245ffd5b5f60208284031215610178575f80fd5b813567ffffffffffffffff8082111561018f575f80fd5b818401915084601f8301126101a2575f80fd5b8135818111156101b4576101b4610154565b604051601f8201601f19908116603f011681019083821181831017156101dc576101dc610154565b816040528281528760208487010111156101f4575f80fd5b826020860160208301375f928101602001929092525095945050505050565b600181811c9082168061022757607f821691505b60208210810361024557634e487b7160e01b5f52602260045260245ffd5b50919050565b601f821115610294575f81815260208120601f850160051c810160208610156102715750805b601f850160051c820191505b818110156102905782815560010161027d565b5050505b505050565b815167ffffffffffffffff8111156102b3576102b3610154565b6102c7816102c18454610213565b8461024b565b602080601f8311600181146102fa575f84156102e35750858301515b5f19600386901b1c1916600185901b178555610290565b5f85815260208120601f198616915b8281101561032857888601518255948401946001909101908401610309565b508582101561034557878501515f19600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220650fac922cdf5b484d55b1f78a1371f28c4eff8c778bdc71e61bcec067df2ffc64736f6c63430008140033';

  var abi = [
    {
      "inputs": [],
      "name": "getInfo",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_info",
          "type": "string"
        }
      ],
      "name": "setInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ];

  var deploy = web3.eth.sendTransaction({
    from: deployer,
    data: bytecode,
    gas: '4700000'
  });

  deploy.on('receipt', function(receipt) {
    var contractAddress = receipt.contractAddress;
    console.log('Contract mined! address: ' + contractAddress + ' transactionHash: ' + receipt.transactionHash);
    
    var contract = new web3.eth.Contract(abi, contractAddress);

    // You can interact with the deployed contract here
    // For example, you can call the getInfo function
    contract.methods.getInfo().call({ from: deployer }).then(function(info) {
      console.log('Info:', info);
    });
  });

  deploy.on('error', function(error) {
    console.error('Error deploying contract:', error);
  });
});
